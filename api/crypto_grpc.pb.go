// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CryptosClient is the client API for Cryptos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CryptosClient interface {
	// Geeting a crypto by id
	Get(ctx context.Context, in *CryptoId, opts ...grpc.CallOption) (*Crypto, error)
}

type cryptosClient struct {
	cc grpc.ClientConnInterface
}

func NewCryptosClient(cc grpc.ClientConnInterface) CryptosClient {
	return &cryptosClient{cc}
}

func (c *cryptosClient) Get(ctx context.Context, in *CryptoId, opts ...grpc.CallOption) (*Crypto, error) {
	out := new(Crypto)
	err := c.cc.Invoke(ctx, "/Crypto.Cryptos/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CryptosServer is the server API for Cryptos service.
// All implementations must embed UnimplementedCryptosServer
// for forward compatibility
type CryptosServer interface {
	// Geeting a crypto by id
	Get(context.Context, *CryptoId) (*Crypto, error)
	mustEmbedUnimplementedCryptosServer()
}

// UnimplementedCryptosServer must be embedded to have forward compatible implementations.
type UnimplementedCryptosServer struct {
}

func (UnimplementedCryptosServer) Get(context.Context, *CryptoId) (*Crypto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCryptosServer) mustEmbedUnimplementedCryptosServer() {}

// UnsafeCryptosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CryptosServer will
// result in compilation errors.
type UnsafeCryptosServer interface {
	mustEmbedUnimplementedCryptosServer()
}

func RegisterCryptosServer(s grpc.ServiceRegistrar, srv CryptosServer) {
	s.RegisterService(&Cryptos_ServiceDesc, srv)
}

func _Cryptos_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptosServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Crypto.Cryptos/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptosServer).Get(ctx, req.(*CryptoId))
	}
	return interceptor(ctx, in, info, handler)
}

// Cryptos_ServiceDesc is the grpc.ServiceDesc for Cryptos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cryptos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Crypto.Cryptos",
	HandlerType: (*CryptosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Cryptos_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/crypto.proto",
}
